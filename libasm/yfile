tuto I followed https://cs.lmu.edu/~ray/notes/nasmtutorial/

; is for comments
section .text  ; tells the assembler to switch to the text segment (where code goes)
section .data  ; where const var are stored

rax is a register of 64 bits, the one "returned" at end of function
eax is part of rax but is 32 bits = int
ax is part of rax but is 8 bits
al is part of rax but is 4 bits = char

rdi = first arg, rsi = second arg


syscall
call		https://stackoverflow.com/questions/36007975/compile-error-relocation-r-x86-64-pc32-against-undefined-symbol


mov register, value
add
sub
cmp v0, v1
jmp
je
jne
jl
jm
push register ; adds value of register on top of stack
pop register ; rm value on top of stack and put it in register


REGISTERS
; 64-bit [QWORD]
R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  R11  R12  R13  R14  R15
RAX RCX RDX RBX RSP RBP RSI RDI

; 32-bit [DWORD]
R0D R1D R2D R3D R4D R5D R6D R7D R8D R9D R10D R11D R12D R13D R14D R15D
EAX ECX EDX EBX ESP EBP ESI EDI

; 16-bit [WORD]
R0W R1W R2W R3W R4W R5W R6W R7W R8W R9W R10W R11W R12W R13W R14W R15W
AX  CX  DX  BX  SP  BP  SI  DI

; 8-bit [BYTE]
R0B R1B R2B R3B R4B R5B R6B R7B R8B R9B R10B R11B R12B R13B R14B R15B
AL  CL  DL  BL  SPL BPL SIL DIL

; 128-bit (used for floating point operations mostly)
XMM0 ... XMM15

INSTRUCTIONS
; Save register
push	REG
pop		REG

; Set register value
mov		REG, VALUE	; DEST = VALUE

; Common operations
add		DEST, VALUE	; DEST = DEST + VALUE
sub		-			; DEST = DEST - VALUE
inc		REG			; REG++
dec		-			; REG--
and		DEST, REG	; DEST = DEST & REG
xor		-			; DEST = DEST ^ REG
xor		REG, REG	; = mov	REG, 0
mul		REG			; REG = REG * RAX
div		REG			; REG = REG / RAX
shr     DEST, VALUE ; DEST = DEST >> VALUE
shl     DEST, VALUE ; DEST = DEST << VALUE
neg		REG			; REG = 0 - REG

; Dereferenced value
		[REG]		; = *REG

; Compare
cmp	REG, VALUE		; Set flags used by jmp variants
					; usefull rflags set by cmp are:
					;	s (sign)
					;	z (zero)
					;	c (carry)
					;	o (overflow)

; Conditional instructions
	j    ; conditional jump
	cmov ; conditinoal move
	set  ; contitional set (set value to 1 if true, 0 otherwise)

	suffix are 	s ns
				z nz
				c nc
				o no
				p np
				pe po
				e ne
				l nl le nle
				g ng ge nge
				a na ae nae
				b nb be nbe

; Label
label:
		jmp	label	; next jumps depends on compare flags from cmp
		je	-		; is equal
		jne	-		; is not equal
		jl	-		; < VALUE
		jle	-		; <= VALUE
		jz	-		; = 0
		jnz	-		; != 0
		jg	-		; > VALUE
		jge	-		; >= VALUE

FUNCTIONS
; Function call
call	FUNCTION

; Parameters registers
RDI RSI RDX RCX R8 R9
            R10 instead?

; Register to preserve
RBP RBX R12 R13 R14 R15	; You **MUST** push/pop them if you use them

; Return register
RAX

; syscall
mov		rax, CODE	; Then RDI, RSI etc.. for params
					; Add 0x2000000 to the syscall number, see table below
syscall